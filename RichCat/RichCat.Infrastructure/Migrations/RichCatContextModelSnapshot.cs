// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RichCat.Infrastructure;

namespace RichCat.Infrastructure.Migrations
{
    [DbContext(typeof(RichCatContext))]
    partial class RichCatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RichCat.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123f46ae-4c63-4cdb-814a-ae13a00a1034"),
                            Level = 0,
                            Name = "Departments",
                            Status = 0
                        });
                });

            modelBuilder.Entity("RichCat.Domain.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ico")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6e8bc91-4cd5-4261-aa04-82713c04f6d5"),
                            Ico = "",
                            Level = 0,
                            Name = "menu1",
                            Order = "",
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Remark = "",
                            Status = 0,
                            Url = ""
                        });
                });

            modelBuilder.Entity("RichCat.Domain.MenuRole", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ButtonId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("MenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuRoles");

                    b.HasData(
                        new
                        {
                            MenuId = new Guid("c6e8bc91-4cd5-4261-aa04-82713c04f6d5"),
                            RoleId = new Guid("c9034d0a-fb56-4b16-96b3-8c3688a6cabb"),
                            ButtonId = "Button1",
                            RoleType = 0
                        });
                });

            modelBuilder.Entity("RichCat.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("RoleDefaultURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9034d0a-fb56-4b16-96b3-8c3688a6cabb"),
                            CreateTime = new DateTime(2022, 4, 18, 15, 27, 53, 332, DateTimeKind.Local).AddTicks(1060),
                            ModifyTime = new DateTime(2022, 4, 18, 15, 27, 53, 332, DateTimeKind.Local).AddTicks(2705),
                            Name = "Role1",
                            RoleDefaultURL = "",
                            description = ""
                        });
                });

            modelBuilder.Entity("RichCat.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e23e73a9-486a-44bd-b8b4-a85bbc68fe0e"),
                            CreateTime = new DateTime(2022, 4, 18, 15, 27, 53, 332, DateTimeKind.Local).AddTicks(6879),
                            DepartmentId = new Guid("123f46ae-4c63-4cdb-814a-ae13a00a1034"),
                            FullName = "Tester1",
                            ModifyTime = new DateTime(2022, 4, 18, 15, 27, 53, 332, DateTimeKind.Local).AddTicks(9336),
                            Name = "Tester1",
                            Password = "111111",
                            Remark = "",
                            Status = 0
                        });
                });

            modelBuilder.Entity("RichCat.Domain.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e23e73a9-486a-44bd-b8b4-a85bbc68fe0e"),
                            RoleId = new Guid("c9034d0a-fb56-4b16-96b3-8c3688a6cabb")
                        });
                });

            modelBuilder.Entity("RichCat.Domain.Department", b =>
                {
                    b.HasOne("RichCat.Domain.Department", "Parent")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RichCat.Domain.MenuRole", b =>
                {
                    b.HasOne("RichCat.Domain.Menu", "Menu")
                        .WithMany("MenumRole")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RichCat.Domain.Role", "Role")
                        .WithMany("MenuRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RichCat.Domain.User", b =>
                {
                    b.HasOne("RichCat.Domain.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RichCat.Domain.UserRole", b =>
                {
                    b.HasOne("RichCat.Domain.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichCat.Domain.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
